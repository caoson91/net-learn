@page "/chat"
@using BlazorUtilities
@rendermode InteractiveServer
@inject SignalRService3 SignalRService
@implements IAsyncDisposable

<h3>Chat</h3>

<input @bind="UserName" placeholder="Your Name" />
<input @bind="Message" placeholder="Your Message" />
<button @onclick="SendMessage">Send</button>

<ul>
    @foreach (var msg in Messages)
    {
        <li>@msg</li>
    }
</ul>

@code {
    private string UserName = "";
    private string Message = "";
    private List<string> Messages = new();

    private HashSet<string> listMessageId = new HashSet<string>();


    // protected override async Task OnInitializedAsync()
    // {
    //     SignalRService.MessageReceived -= OnMessageReceived;
    //     SignalRService.MessageReceived += OnMessageReceived;
    // }

    // private async Task OnMessageReceived(string user, string message, string messageId)
    // {
    //     await InvokeAsync(() =>
    //     {
    //         Console.WriteLine($"{user}: {message}");
    //         Messages.Add(message);
    //         StateHasChanged();
    //     });
    // }

    // public async ValueTask DisposeAsync()
    // {
    //     SignalRService.MessageReceived -= OnMessageReceived;
    //     await Task.CompletedTask;
    // }



    protected override async Task OnInitializedAsync()
    {
        // Unsubscribe from the event to prevent duplicate subscriptions
        SignalRService.MessageReceived += OnMessageReceived;

        await SignalRService.ConnectAsync();
    }

    private async Task OnMessageReceived(string user, string message, string messageId)
    {
        if (listMessageId.Add(messageId))
        {
            Console.WriteLine($"{user}: {message}");
            Messages.Add($"{user}: {message}");
            await InvokeAsync(StateHasChanged);
        }
    }

    public async ValueTask DisposeAsync()
    {
        // Unsubscribe from the event to prevent memory leaks
        SignalRService.MessageReceived -= OnMessageReceived;
    }

    private async Task SendMessage()
    {
        await SignalRService.SendMessageAsync(UserName, Message, "messageId");
        Message = "";
    }
}
